<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="#"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:ps="http://graphpad.com/prism/Prism.htm" version="1.0">
	<!--
	XML style sheet template for formatting data and info tables from GraphPad Prism 7.0.
	Copyright 1992-2016 GraphPad Software, Inc.
-->
	<xsl:output method="html" version="4.0" omit-xml-declaration="yes"/>
	<GraphPadPrismFile xmlns="http://graphpad.com/prism/Prism.htm" PrismXMLVersion="5.00">
<Created>
<MostRecentVersion CreatedByProgram="GraphPad Prism" CreatedByVersion="7.0.5.234" Login="singha30" DateTime="2019-07-08T21:07:36-05:00"/>
</Created>
<InfoSequence>
<Ref ID="Info0" Selected="1"/>
</InfoSequence>
<Info ID="Info0">
<Title>Project info 1</Title>
<Notes>
</Notes>
<Constant><Name>Experiment Date</Name><Value>2019-05-22</Value></Constant>
<Constant><Name>Experiment ID</Name><Value/></Constant>
<Constant><Name>Notebook ID</Name><Value/></Constant>
<Constant><Name>Project</Name><Value/></Constant>
<Constant><Name>Experimenter</Name><Value/></Constant>
<Constant><Name>Protocol</Name><Value/></Constant>
</Info>

<TableSequence>

<Ref ID="Table0"/>
<Ref ID="Table1" Selected="1"/>
<Ref ID="Table3"/>
</TableSequence>
<Table ID="Table0" XFormat="numbers" YFormat="replicates" Replicates="1" TableType="XY" EVFormat="AsteriskAfterNumber">
<Title>Data 1</Title>
<XColumn Width="81" Subcolumns="1" Decimals="0">
<Title>Time</Title>
<Subcolumn>
<d>0</d>
<d>1</d>
<d>3</d>
<d>5</d>
<d>7</d>
<d>10</d>
<d>14</d>
</Subcolumn>
</XColumn>
<XAdvancedColumn Version="1" Width="81" Decimals="0" Subcolumns="1">
<Title>Time</Title>
<Subcolumn>
<d>0</d>
<d>1</d>
<d>3</d>
<d>5</d>
<d>7</d>
<d>10</d>
<d>14</d>
</Subcolumn>
</XAdvancedColumn>
</Table>
<Table ID="Table1" XFormat="numbers" YFormat="SDN" TableType="XY" EVFormat="AsteriskAfterNumber">
<Title>sni sham</Title>
<XColumn Width="90" Subcolumns="1" Decimals="0">
<Title/>
<Subcolumn>
<d>0</d>
<d>1</d>
<d>3</d>
<d>5</d>
<d>7</d>
<d>10</d>
<d>14</d>
</Subcolumn>
</XColumn>
<XAdvancedColumn Version="1" Width="90" Decimals="0" Subcolumns="1">
<Title/>
<Subcolumn>
<d>0</d>
<d>1</d>
<d>3</d>
<d>5</d>
<d>7</d>
<d>10</d>
<d>14</d>
</Subcolumn>
</XAdvancedColumn>
<YColumn Width="243" Decimals="1" Subcolumns="3">
<Title>SNI</Title>
<Subcolumn>
<d>15</d>
<d>1</d>
<d>0.5</d>
<d>0.5</d>
<d>0.5</d>
<d>0.5</d>
<d>0.5</d>
</Subcolumn>
<Subcolumn>
<d>0.5012</d>
<d>0.25</d>
<d>0.3</d>
<d>0.5</d>
<d>0.25</d>
<d>0.3</d>
<d>0.4</d>
</Subcolumn>
<Subcolumn>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
</Subcolumn>
</YColumn>
<YColumn Width="243" Decimals="1" Subcolumns="3">
<Title>Sham</Title>
<Subcolumn>
<d>15</d>
<d>13.7</d>
<d>14.9</d>
<d>15</d>
<d>15</d>
<d>15</d>
<d>15</d>
</Subcolumn>
<Subcolumn>
<d>0.52411</d>
<d>2</d>
<d>1</d>
<d>0.5</d>
<d>0.5237</d>
<d>0.6524</d>
<d>0.4154</d>
</Subcolumn>
<Subcolumn>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
</Subcolumn>
</YColumn>
</Table>
<Table ID="Table3" XFormat="numbers" YFormat="SDN" TableType="XY" EVFormat="AsteriskAfterNumber">
<Title>cfa saline</Title>
<XColumn Width="81" Subcolumns="1" Decimals="0">
<Title/>
<Subcolumn>
<d>0</d>
<d>1</d>
<d>3</d>
<d>5</d>
<d>7</d>
<d>10</d>
<d>14</d>
</Subcolumn>
</XColumn>
<XAdvancedColumn Version="1" Width="81" Decimals="0" Subcolumns="1">
<Title/>
<Subcolumn>
<d>0</d>
<d>1</d>
<d>3</d>
<d>5</d>
<d>7</d>
<d>10</d>
<d>14</d>
</Subcolumn>
</XAdvancedColumn>
<YColumn Width="243" Decimals="2" Subcolumns="3">
<Title>CFA </Title>
<Subcolumn>
<d>15</d>
<d>0.5</d>
<d>0.5</d>
<d>1</d>
<d>2</d>
<d>1.5</d>
<d>1</d>
</Subcolumn>
<Subcolumn>
<d>0.5012</d>
<d>0.321</d>
<d>0.0421</d>
<d>0.64</d>
<d>1.3</d>
<d>0.567</d>
<d>0.652</d>
</Subcolumn>
<Subcolumn>
<d>7</d>
<d>7</d>
<d>7</d>
<d>7</d>
<d>7</d>
<d>7</d>
<d>7</d>
</Subcolumn>
</YColumn>
<YColumn Width="243" Decimals="1" Subcolumns="3">
<Title>Saline</Title>
<Subcolumn>
<d>15</d>
<d>14.1</d>
<d>14.5</d>
<d>15</d>
<d>15</d>
<d>14.9</d>
<d>15</d>
</Subcolumn>
<Subcolumn>
<d>0.52411</d>
<d>2</d>
<d>1.3</d>
<d>0.894</d>
<d>0.5237</d>
<d>0.35</d>
<d>0.12</d>
</Subcolumn>
<Subcolumn>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
<d>6</d>
</Subcolumn>
</YColumn>
</Table>

<!--Analyses, graphs and layouts as compressed binary. Don't edit this part of the file.-->

<Template dt:dt="bin.base64">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
rkq3IeoGsW6wUgWd+/8DAAD//wMAvoApww==</Template></GraphPadPrismFile>
	<xsl:template match="ps:Info">
		<a><xsl:attribute name="name"><xsl:value-of select="@ID"/></xsl:attribute></a>
		<table border="0">
			<tr><td><xsl:apply-templates select="ps:Title"/> </td><td width="20"></td><td><b>Notes</b></td></tr>
			<tr><td valign="top">
					<table BORDER="1" CELLSPACING="0">
						<tr><th>Constant</th><th>Name</th></tr>
						<xsl:for-each select="ps:Constant">
							<tr>
								<td><xsl:apply-templates select="ps:Name"/> </td>
								<td><xsl:apply-templates select="ps:Value"/> </td>
							</tr>
						</xsl:for-each>
					</table>
				</td>
				<td width="20">
				</td>
				<td valign="top">
					<xsl:apply-templates select="ps:Notes"/>
				</td></tr>
		</table>
	</xsl:template>
	<xsl:template match="ps:GraphPadPrismFile">
		<HTML>
			<BODY>
				<xsl:variable name="Chars" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
				<font color="#999999">
					<p align="center">This file can be opened by <a href="http://www.graphpad.com">GraphPad</a> Prism (version 
	<xsl:value-of select="@PrismXMLVersion"/> or later). </p></font><hr/>
         This file contains <xsl:value-of select="count(ps:Table|ps:HugeTable)"/> data tables and 
	<xsl:value-of select="count(ps:Info)+count(ps:Table|ps:HugeTable/ps:Info)"/> info tables:

	<dir>
					<xsl:for-each select="ps:Info">
						<li>
							<a>
								<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
								<xsl:apply-templates select="ps:Title"/>
							</a>
						</li>
					</xsl:for-each>
					<xsl:for-each select="ps:Table|ps:HugeTable">
						<li>
							<a>
								<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
								<xsl:apply-templates select="ps:Title"/>
							</a>
							<dir>
								<xsl:for-each select="ps:Info">
									<li>
										<a>
											<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
											<xsl:apply-templates select="ps:Title"/>
										</a>
									</li>
								</xsl:for-each>
							</dir>
						</li>
					</xsl:for-each>
				</dir>
				<hr/>
				<xsl:apply-templates select="ps:Info"/>
				<br/>
				<hr/>
				<br/>
				<xsl:for-each select="ps:Table|ps:HugeTable">
					<xsl:apply-templates select="ps:Title"/>
					<a><xsl:attribute name="name"><xsl:value-of select="@ID"/></xsl:attribute></a>
					<xsl:variable name="width" select="100 div count (*/ps:Subcolumn)"/>
					<xsl:variable name="xFormat" select="./@XFormat"/>
					<xsl:variable name="yFormat" select="./@YFormat"/>
					<xsl:variable name="nRepl" select="./@replicates"/>
					<xsl:variable name="isXAdvancedColumn" select="boolean(($xFormat='date' or $xFormat='time' or $xFormat='startenddate') and count(ps:XAdvancedColumn) &gt; 0)"/>
					<xsl:variable name="isXAdvancedSubcol" select="boolean(($xFormat='startenddate') or count(ps:XAdvancedColumn/ps:Subcolumn/ps:Title) &gt; 0)"/>
					<xsl:variable name="isXSubcol" select="boolean(($xFormat='error' or count(ps:XColumn/ps:Subcolumn/ps:Title) &gt; 0) and not ($isXAdvancedColumn))"/>
					<xsl:variable name="isYSubcol" select="boolean(($yFormat='replicates'and ./@Replicates&gt;1) or 
						 ($yFormat!='text'and $yFormat!='replicates') or 
						count(ps:YColumn/ps:Subcolumn/ps:Title)&gt;0)"/>
					<xsl:variable name="isYSubColNameCustom" select="boolean($isYSubcol and count(ps:SubColumnTitles)&gt;0)"/>
					<TABLE BORDER="1" CELLSPACING="0">
						<TR>
							<xsl:for-each select="ps:RowTitlesColumn">
								<TD align="center">
									<xsl:attribute name="rowspan">
										<xsl:if test="$isXSubcol or $isXAdvancedSubcol or $isYSubcol">2</xsl:if>
									</xsl:attribute><BR/>
								</TD>
							</xsl:for-each>
							<xsl:if test="not ($isXAdvancedColumn)">
								<xsl:for-each select="ps:XColumn">
									<TD align="center">
										<xsl:attribute name="rowspan">
											<xsl:if test="$isYSubcol and not($isXSubcol)">2</xsl:if>
										</xsl:attribute>
										<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
						 
						<xsl:apply-templates select="ps:Title"/>
										<xsl:if test="count(ps:Title)=0 or ps:Title=''">X-Title</xsl:if>				
						 
					</TD>
								</xsl:for-each>
							</xsl:if>
							<xsl:if test="$isXAdvancedColumn">
								<xsl:for-each select="ps:XAdvancedColumn">
									<TD align="center">
										<xsl:attribute name="rowspan">
											<xsl:if test="$isYSubcol and not($isXAdvancedSubcol)">2</xsl:if>
										</xsl:attribute>
										<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
						 
						<xsl:apply-templates select="ps:Title"/>
										<xsl:if test="count(ps:Title)=0 or ps:Title=''">X-Title</xsl:if>				
						 
					</TD>
								</xsl:for-each>
							</xsl:if>
							<xsl:for-each select="ps:YColumn">
								<xsl:variable name="DefColName2" select="(position()-1) mod 26"/>
								<xsl:variable name="DefColName1" select="(position()-1-$DefColName2) div 26"/>
								<TD align="center">
									<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
									<xsl:attribute name="rowspan">
										<xsl:if test="($isXSubcol or $isXAdvancedSubcol) and not($isYSubcol)">2</xsl:if>
									</xsl:attribute>
					 
					<xsl:apply-templates select="ps:Title"/>
									<xsl:if test="count(ps:Title)=0 or ps:Title=''">
										<xsl:value-of select="'Data Set-'"/>
										<xsl:if test="$DefColName1 &gt; 0">
											<xsl:value-of select="substring($Chars,$DefColName1,1)"/>
										</xsl:if>
										<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>
									</xsl:if>
					 				
	   			</TD>
							</xsl:for-each>
						</TR>
						<xsl:if test="$isXSubcol or $isXAdvancedSubcol or $isYSubcol">
							<TR>
								<xsl:if test="$isXSubcol">
									<xsl:for-each select="ps:XColumn">
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center"> 
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:choose>
														<xsl:when test="position()=1"><B>X</B></xsl:when>
														<xsl:when test="position()=2"><B>Err.Bar</B></xsl:when>
													</xsl:choose>
												</xsl:if>				
					 
				</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="$isXAdvancedSubcol">
									<xsl:for-each select="ps:XAdvancedColumn">
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center"> 
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:choose>
														<xsl:when test="position()=1"><B>Starting Date</B></xsl:when>
														<xsl:when test="position()=2"><B>Ending Date</B></xsl:when>
													</xsl:choose>
												</xsl:if>				
					 
				</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="$isYSubcol">
									<xsl:for-each select="ps:YColumn">
										<xsl:variable name="DefColName2" select="(position()-1) mod 26"/>
										<xsl:variable name="DefColName1" select="(position()-1-$DefColName2) div 26"/>
										<xsl:variable name="YColumnNdx" select="position()"/>
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center">
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:if test="$yFormat='replicates' or $yFormat='text'">
														<B>
															<xsl:if test="$DefColName1 &gt; 0">
																<xsl:value-of select="substring($Chars,$DefColName1,1)"/>
															</xsl:if>
															<xsl:choose>
																<xsl:when test="$isYSubColNameCustom">
																	<xsl:variable name="subColCustomNamePos" select="position()"/>
																	<xsl:for-each select="../../ps:SubColumnTitles/ps:Subcolumn">
																		<xsl:if test="position()=$subColCustomNamePos">
																			<xsl:choose>
																				<xsl:when test="../../ps:SubColumnTitles/@OwnSet='1'">
																					<xsl:variable name="DItemsCount" select="count(./ps:d)"/>
																					<xsl:choose>
																						<xsl:when test="$DItemsCount&lt;$YColumnNdx or ./ps:d[$YColumnNdx]=''">
																							<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:apply-templates select="./ps:d[$YColumnNdx]"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="../../ps:SubColumnTitles/@OwnSet='0'">
																					<xsl:variable name="DItemsCount" select="count(./ps:d)"/>
																					<xsl:choose>
																						<xsl:when test="$DItemsCount&lt;1 or ./ps:d[1]=''">
																							<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:apply-templates select="./ps:d[1]"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:apply-templates select="ps:d"/>
																					<xsl:if test="ps:d=''">
																						<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																					</xsl:if>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:if>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																</xsl:otherwise>
															</xsl:choose>
														</B>
													</xsl:if>
													<xsl:if test="$yFormat!='replicates' and $yFormat!='text'">
														<xsl:if test="not($yFormat='replicates' or $yFormat='text')">
															<xsl:if test="position()=1"><B>Mean</B></xsl:if>
															<xsl:if test="position()!=1">
																<xsl:choose>
																	<xsl:when test="$yFormat='SD'">
																		<B>SD</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='SE'">
																		<B>SEM</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='CV'">
																		<B>%CV</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='SDN'">
																		<xsl:if test="position()=2"><B>SD</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='SEN'">
																		<xsl:if test="position()=2"><B>SEM</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='CVN'">
																		<xsl:if test="position()=2"><B>%CV</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='low-high'">
																		<xsl:if test="position()=2"><B>+Error</B></xsl:if>
																		<xsl:if test="position()=3"><B>-Error</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='upper-lower-limits'">
																		<xsl:if test="position()=2"><B>UpperLimit</B></xsl:if>
																		<xsl:if test="position()=3"><B>LowerLimit</B></xsl:if>
																	</xsl:when>
																</xsl:choose>
															</xsl:if>
														</xsl:if>
													</xsl:if>
												</xsl:if>
					 				
	   			</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
							</TR>
						</xsl:if>
						<TR>
							<xsl:for-each select="ps:RowTitlesColumn/ps:Subcolumn">
								<td valign="top" nowrap="1">
									<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
									<xsl:apply-templates select="ps:d"/>
									<xsl:if test="count(ps:d)=0"><br/></xsl:if>
								</td>
							</xsl:for-each>
							<xsl:if test="not($isXAdvancedColumn)">
								<xsl:for-each select="ps:XColumn/ps:Subcolumn">
									<td valign="top" nowrap="1">
										<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
										<xsl:apply-templates select="ps:d"/>
										<xsl:if test="count(ps:d)=0"><br/></xsl:if>
									</td>
								</xsl:for-each>
							</xsl:if>
							<xsl:if test="$isXAdvancedColumn">
								<xsl:for-each select="ps:XAdvancedColumn/ps:Subcolumn">
									<td valign="top" nowrap="1">
										<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
										<xsl:apply-templates select="ps:d"/>
										<xsl:if test="count(ps:d)=0"><br/></xsl:if>
									</td>
								</xsl:for-each>
							</xsl:if>
							<xsl:for-each select="ps:YColumn/ps:Subcolumn">
								<td valign="top" nowrap="1">
									<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
									<xsl:apply-templates select="ps:d"/>
									<xsl:if test="count(ps:d)=0"><br/></xsl:if>
								</td>
							</xsl:for-each>
						</TR>
					</TABLE>
					<br/>
					<xsl:apply-templates select="ps:Info"/>
					<br/>
					<hr/>
					<br/>
				</xsl:for-each>
			</BODY>
		</HTML>
	</xsl:template>
	<!--<xsl:template match="ps:d">
	<xsl:choose>
		<xsl:when test="@Excluded and string-length(text())" >
		    <font color="#0000ee">
	      		<xsl:apply-templates select="node()"/>*		
		    </font>
		</xsl:when>
	    <xsl:otherwise>
			<xsl:apply-templates select="node()"/>
		</xsl:otherwise>
	</xsl:choose>
	<xsl:if test="position()!=last()"><br/></xsl:if>
</xsl:template>-->
	<xsl:template match="ps:d">
		<xsl:choose>
			<xsl:when test="@Excluded and string-length(text())">
				<xsl:choose>
					<xsl:when test="../../../@EVFormat='AsteriskAfterNumber'">
						<font color="#0000ee">
							<xsl:apply-templates select="node()"/>*
						</font>
					</xsl:when>
					<xsl:when test="../../../@EVFormat='Blank'">
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="node()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="node()"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="position()!=last()"><br/></xsl:if>
	</xsl:template>
	<xsl:template match="ps:Title">
		<b><xsl:apply-templates select="node()"/></b>
	</xsl:template>
	<xsl:template match="node()">
		<xsl:copy>
			<xsl:apply-templates select="node()"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="ps:Font">
		<font>
			<xsl:if test="@Size">
				<xsl:attribute name="STYLE">font-size:<xsl:value-of select="@Size"/>pt</xsl:attribute>
			</xsl:if>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates select="node()"/>
		</font>
	</xsl:template>
	<xsl:template match="/">
		<HTML>
			<BODY>
				<xsl:apply-templates select="//ps:GraphPadPrismFile"/>
			</BODY>
		</HTML>
	</xsl:template>
</xsl:stylesheet>
